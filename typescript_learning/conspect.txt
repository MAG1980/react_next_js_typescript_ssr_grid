NVM - менеджер версий Node JS.
примеры команд nvm:
nvm install 14 - установить указанную версию Node JS
nmv use 15 - переключиться на использование 15 версии Node JS

node -v - выводит текущую версию Node JS

npm i -g typescript - установить typescript глобально


Typescript

tsc - typescript compiler - компилятор typescript

tsc --init - создаёт конфигурационный файл tsconfig.json
Параметры конфигурационного файла:
"noImplicitAny": true - разрешить неявное использование тип any (строго не рекомендуется)


tsc - выполняет компиляцию файлов .ts в .js c настройками, описанными в tsconfig.json текущей папки

Основные типы данных:
number,
string,
boolean,
array:  const d: string[]=['adf','xccv','sdf']
any - позволяет изменять тип данных на лету (крайне не рекомендован к использованию в production)
function не является типом
object
кортежи
Enum : перечисления
Symbol
null и undefined : соответствуют значениям null и undefined в javascript
unknown
Never : также представляет отсутствие значения и используется в качестве возвращаемого типа функций,
которые генерируют или возвращают ошибку

Функции, которые не возвращают данных, возвращают тип данных void

Знак вопроса перед объявление типа равносилен юнион-типу type|undefined:
longitude?:number <=> longitude:number|undefined
? используется при типизации необязательных параметров

Для объявления union-type (объединённого типа) используется символ |
id: number|string

Указывать тип данных при инициализации переменных необязательно,
т.к. Typescript автоматически определит тип данных на основе присваиваемого значения.

Typescript не позволяет складывать данные различных типов.

Использование кастомных типов позволяет разгрузить объявление функции,
используя название кастомного типа данных

Удобны в использовании кастомные union-types, например
type stringOrNumber = string | number

При объявлении интерфейсов = не используется.
Интерфейсы работают аналогично типам.


Рекомендуется использовать в Typescript интерфейсы.
Допускается использовать типы для объявления литеральных типов или union-types.

Кардинальным отличием интерфейсов от типов является возможность расширять другие интерфейсы
с помощью ключевого слова extends.
Другое отличие: типам недоступно добавление свойств.

При создании типа на основе существующего можно использовать interception (&),
работа которого похожа на extends для интерфейсов.

Если тип неизвестен или имеется возможность сконвертировать один тип в другой,
то можно использовать каст типов.

Тип может быть сконвертирован другой в тип,
который создан на его базе путём расширения.
В этом случае недостающие свойства получат значение undefined.

Каст типов можно использовать для более точного указания типа.
Если возвращаемое по умолчанию значение относится к юнион-типу,
(например HTMLElement|null), но мы точно знаем тип возвращаемых данных,
с помощью каста типов можно принудительно указать его значение ("зафорсить").
const canvas = document.getElementById('canvas') as HTMLCanvasElement

При объявлении интерфейсов сложных объектов рекомендуется разбивать их на несколько:
для каждого вложенного объекта создавать отдельный интерфейс.
Это позволит легче воспринимать инормацию и переиспользовать интерфейсы,
если данные сложного объекта будут использованы где-либо частично.