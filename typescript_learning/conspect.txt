NVM - менеджер версий Node JS.
примеры команд nvm:
nvm install 14 - установить указанную версию Node JS
nmv use 15 - переключиться на использование 15 версии Node JS

node -v - выводит текущую версию Node JS

npm i -g typescript - установить typescript глобально


Typescript

tsc - typescript compiler - компилятор typescript

tsc --init - создаёт конфигурационный файл tsconfig.json
Параметры конфигурационного файла:
"noImplicitAny": true - разрешить неявное использование тип any (строго не рекомендуется)


tsc - выполняет компиляцию файлов .ts в .js c настройками, описанными в tsconfig.json текущей папки

Основные типы данных:
number,
string,
boolean,
array:  const d: string[]=['adf','xccv','sdf']
any - позволяет изменять тип данных на лету (крайне не рекомендован к использованию в production)
function не является типом
object
кортежи
Enum : перечисления
Symbol
null и undefined : соответствуют значениям null и undefined в javascript
unknown
Never : также представляет отсутствие значения и используется в качестве возвращаемого типа функций,
которые генерируют или возвращают ошибку. Обозначает, что переменная никогда не примет значения.
Тип Never может быть использован для генерации ошибок при компиляции, например,
если не для каждого значения enum в операторе switch определены case:
function getDice(dice: Dice) {
    switch (dice) {
        default: {
            /*Присваиваем переменной типа never значение, которое никогда не будет возвращено
                 Это будет приводить к ошибкам компиляции, если case предусмотрены не для всех имеющихся значений enum,
                 что позволит отловить возможные ошибки на стадии компиляции.  */
            let a: never = dice
        }
    }
}

Функции, которые не возвращают данных, возвращают тип данных void

Знак вопроса перед объявление типа равносилен юнион-типу type|undefined:
longitude?:number <=> longitude:number|undefined
? используется при типизации необязательных параметров

Для объявления union-type (объединённого типа) используется символ |
id: number|string

Указывать тип данных при инициализации переменных необязательно,
т.к. Typescript автоматически определит тип данных на основе присваиваемого значения.

Typescript не позволяет складывать данные различных типов.

Использование кастомных типов позволяет разгрузить объявление функции,
используя название кастомного типа данных

Удобны в использовании кастомные union-types, например
type stringOrNumber = string | number

При объявлении интерфейсов = не используется.
Интерфейсы работают аналогично типам.


Рекомендуется использовать в Typescript интерфейсы.
Допускается использовать типы для объявления литеральных типов или union-types.

Кардинальным отличием интерфейсов от типов является возможность расширять другие интерфейсы
с помощью ключевого слова extends.
Другое отличие: типам недоступно добавление свойств.

При создании типа на основе существующего можно использовать interception (&),
работа которого похожа на extends для интерфейсов.

Если тип неизвестен или имеется возможность сконвертировать один тип в другой,
то можно использовать каст типов.

Тип может быть сконвертирован другой в тип,
который создан на его базе путём расширения.
В этом случае недостающие свойства получат значение undefined.

Каст типов можно использовать для более точного указания типа.
Если возвращаемое по умолчанию значение относится к юнион-типу,
(например HTMLElement|null), но мы точно знаем тип возвращаемых данных,
с помощью каста типов можно принудительно указать его значение ("зафорсить").
const canvas = document.getElementById('canvas') as HTMLCanvasElement

При объявлении интерфейсов сложных объектов рекомендуется разбивать их на несколько:
для каждого вложенного объекта создавать отдельный интерфейс.
Это позволит легче воспринимать инормацию и переиспользовать интерфейсы,
если данные сложного объекта будут использованы где-либо частично.


Литеральные типы
Переменная literal  может принимать только значение 'test1'
let literal: 'test1' = 'test1'

Для литерального actionType допустимы только значения 'up'|'down'.
Это поведение напоминает тип Enum.
type actionType = 'up' | 'down'

Возвращаемое функцией значение можно типизировать конкретными литералами:
function performAction(action: actionType): 1 | -1

Литеральные типы можно комбинировать с обычными типами и интерфейсами
function exampleFunction(action:actionType|IAction){return}


Enum - перечислимый тип.

Enums полезно использовать для того, чтобы ограничить область значений переменной,
как и в случае с литеральными типами,
но использовать Enum удобнее.

При объявлении перечислимого типа его допустимым значениям автоматически будут присвоены значения, начинающиеся с нуля.
Это числовые представления enum.
Такие enum называются числовыми.
Для числовых enum можно указать начальное значение представлений. Остальные будут рассчитаны автоматически.
Для строковых enums нужно указывать значения для каждого из представлений. Автоматически они не рассчитываются.
Гетерогенные enums содержат как строковые, так числовые значения представлений.
Enums бывают рассчитываемыми. в качестве значения представления они используют функции.
Рассчитываемые enums могут быть только числовыми.
Enums можно использовать в runtime как объекты.

Обратный маппинг используется, если требуется получить строковые значения enum.
При компиляции Enums преобразуются в функции, которые маппят выходные значения, в зависимости от входного значения.

Если enum использоваться без внесения изменений, то его можно объявить как константный enum.
При компиляции константный enum будет преобразован не в функцию, а в константу.
Это позволяет экономить ресурсы, т.к. не происходит вызов функции при конвертации enum.


Tuple (кортеж)
Кортеж позволяет хранить значения разных типов в одном массиве.
При компиляции Tule в JS получается реальный массив.
При инициализации кортеж ограничивает длину и порядок следования элементов массива.
Кортеж имеет те же методы, что и обычный массив.
Кортеж позволяет добавлять в него элементы, но при попытке получения значений элементов,
находящихся за пределами длины кортежа, будет вызывать ошибки.
Длина кортежа является неизменяемой величиной.
В кортеже следует хранить данные, относящиеся к одному объекту, если хранить их в объекте нецелесообразно,
например, однотипные данные.
Перебирать элементы кортежа (map), которые различаются по типу позволяет комбинация switch (typeof element) case и typeof.
Кортежи можно деструктурировать как обычные массивы.
С кортежами можно использовать Rest-оператор.
Благодаря типизации Typescript для каждого элемента кортежа IDE будет предлагать только доступные для его типа методы.


Generics
Для переиспользования кода в Typescript можно использовать Generics/
Generics позволяют использовать функции и объекты для разных типов данных.
Generics можно использовать и при объявлении интерфейсов.
После проверки типа аргумента (if, case в комбинации с typeof) IDE будет прелагать для него только доступные его типу методы.
Generics способны к расширению (extends). Это позволяет накладывать ограничения на типы аргументов.
Например, обязать дженерик иметь внутри свойства, описанные расширяемым интерфейсом.
