/*
При объявлении перечислимого типа его допустимым значениям автоматически будут присвоены значения, начинающиеся с нуля.
Это числовые представления enum.
Такие enum называются числовыми.
*/
enum Direction {
    up,
    down,
    left,
    right
}

//Для числовых enum можно указать начальное значение представлений. Остальные будут рассчитаны автоматически.
enum NumberEnum {
    one = 5,
    two,
}

//Для строковых enums нужно указывать значения для каждого из представлений. Автоматически они не рассчитываются.
enum StringEnum {
    Up = 'up',
    Down = 'down'
}

//Гетерогенный enum содержит как числовые, так и строковые представления.
enum Decision {
    Yes = 1,
    No = 'No'
}

//Пример расчётного Enum

function calcEnum() {
    return 2
}

enum CalcEnum {
    Yes = 1,
    No = calcEnum()
}

//Enums можно использовать в runtime как объекты.
function runEnum(obj: { up: number }) {
}

runEnum(Direction)

//Обратный маппинг используется, если требуется получить строковые значения enum.
enum Test {
    A
}

let test = Test.A
let nameA = Test[test] //A

/*Если enum использоваться без внесения изменений,
то его можно объявить как константный enum.*/
const enum ConstEnum {
    A,
    B
}

/*При компиляции ConstEnum будет преобразован не в функцию, а в константу.
Это позволяет экономить ресурсы.*/
let c1 = ConstEnum.A

enum Dice {
    One,
    Two,
}

function getDice(dice: Dice) {
    switch (dice) {
        case Dice.One: {
            return "Один"
        }
        case Dice.Two: {
            return "Два"
        }
        default: {
            /*Присваиваем переменной типа never значение, которое никогда не будет возвращено
                 Это будет приводить к ошибкам компиляции, если case предусмотрены не для всех имеющихся значений enum,
                 что позволит отловить возможные ошибки на стадии компиляции.  */
            let a: never = dice
        }
    }
}